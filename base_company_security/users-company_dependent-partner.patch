diff --git a/odoo/addons/base/data/base_data.sql b/odoo/addons/base/data/base_data.sql
index 2e295332..bd97cc38 100644
--- a/odoo/addons/base/data/base_data.sql
+++ b/odoo/addons/base/data/base_data.sql
@@ -20,7 +20,6 @@ CREATE TABLE res_users (
     -- No FK references below, will be added later by ORM
     -- (when the destination rows exist)
     company_id integer, -- references res_company,
-    partner_id integer, -- references res_partner,
     create_date timestamp without time zone,
     primary key(id)
 );
@@ -136,7 +135,7 @@ insert into res_partner (id, name, company_id, create_date) VALUES (1, 'My Compa
 insert into ir_model_data (name, module, model, noupdate, res_id) VALUES ('main_partner', 'base', 'res.partner', true, 1);
 select setval('res_partner_id_seq', 1);
 
-insert into res_users (id, login, password, active, partner_id, company_id, create_date) VALUES (1, '__system__', NULL, false, 1, 1, now() at time zone 'UTC');
+insert into res_users (id, login, password, active, company_id, create_date) VALUES (1, '__system__', NULL, false, 1, now() at time zone 'UTC');
 insert into ir_model_data (name, module, model, noupdate, res_id) VALUES ('user_root', 'base', 'res.users', true, 1);
 select setval('res_users_id_seq', 1);
 
diff --git a/odoo/addons/base/models/ir_property.py b/odoo/addons/base/models/ir_property.py
index cc2aa3cf..501c84fe 100644
--- a/odoo/addons/base/models/ir_property.py
+++ b/odoo/addons/base/models/ir_property.py
@@ -60,6 +60,29 @@ class Property(models.Model):
                             default='many2one',
                             index=True)
 
+    resource_id = fields.Integer("Resource ID", compute='_compute_resource_id', store=True, index=True,
+        help="resource_id and value_reference_id are necessary to join res.users with company_dependent res.partner using standard query.")
+    value_reference_id = fields.Integer("Value Reference ID", compute='_compute_value_reference_id', store=True, index=True,
+        help="resource_id and value_reference_id are necessary to join res.users with company_dependent res.partner using standard query.")
+
+    @api.depends('res_id')
+    def _compute_resource_id(self):
+        for record in self:
+            if record.res_id:
+                r = record.res_id
+                record.resource_id = int(r[r.find(',')+1:])
+            else:
+                record.resource_id = None
+
+    @api.depends('value_reference')
+    def _compute_value_reference_id(self):
+        for record in self:
+            if record.value_reference:
+                r = record.value_reference
+                record.value_reference_id = int(r[r.find(',')+1:])
+            else:
+                record.value_reference_id = None
+
     def init(self):
         # Ensure there is at most one active variant for each combination.
         query = """
diff --git a/odoo/addons/base/models/res_users.py b/odoo/addons/base/models/res_users.py
index a6a5f7cc..5e9de5fe 100644
--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -282,6 +282,7 @@ class Users(models.Model):
         return image_process(image, colorize=True)
 
     partner_id = fields.Many2one('res.partner', required=True, ondelete='restrict', auto_join=True,
+        company_dependent=True,
         string='Related Partner', help='Partner-related data of the user')
     login = fields.Char(required=True, help="Used to log into the system")
     password = fields.Char(
@@ -1001,6 +1002,70 @@ class Users(models.Model):
     def _mfa_url(self):
         """ If an MFA method is enabled, returns the URL for its second step. """
         return
+        
+    # SQL join; res.users _inherits company_dependent res.parter
+    def _inherits_query_left_join(self, query, lhs_alias, lhs_column, rhs_table, rhs_column, link, extra=None, extra_params=()):
+        property_alias = query.left_join(
+            'res_users',
+            'id',
+            'ir_property',
+            'resource_id',
+            'property_id',
+            "left(res_users__property_id.res_id, 10) = 'res.users,' AND left(res_users__property_id.value_reference, 12) = 'res.partner,'", # res_id starts with 'res.users' AND value_reference starts with 'res.partner'
+        )
+        parent_alias = query.left_join(
+            # 'ir_property',
+            'res_users__property_id',
+            'value_reference_id',
+            'res_partner',
+            'id',
+            'partner_id',
+        )
+        return parent_alias
+
+    # copied from ORM, using _inherits_query_left_join
+    def _inherits_join_add(self, current_model, parent_model_name, query):
+        """
+        Add missing table SELECT and JOIN clause to ``query`` for reaching the parent table (no duplicates)
+        :param current_model: current model object
+        :param parent_model_name: name of the parent model for which the clauses should be added
+        :param query: query object on which the JOIN should be added
+        """
+        inherits_field = current_model._inherits[parent_model_name]
+        parent_model = self.env[parent_model_name]
+        parent_alias = self._inherits_query_left_join(query,
+            current_model._table, inherits_field, parent_model._table, 'id', inherits_field,
+        )
+        return parent_alias
+
+    # copied from ORM, using _inherits_query_left_join
+    @api.model
+    def _inherits_join_calc(self, alias, fname, query):
+        """
+        Adds missing table select and join clause(s) to ``query`` for reaching
+        the field coming from an '_inherits' parent table (no duplicates).
+        :param alias: name of the initial SQL alias
+        :param fname: name of inherited field to reach
+        :param query: query object on which the JOIN should be added
+        :return: qualified name of field, to be used in SELECT clause
+        """
+        # INVARIANT: alias is the SQL alias of model._table in query
+        model, field = self, self._fields[fname]
+        while field.inherited:
+            # retrieve the parent model where field is inherited from
+            parent_model = self.env[field.related_field.model_name]
+            parent_fname = field.related[0]
+            # JOIN parent_model._table AS parent_alias ON alias.parent_fname = parent_alias.id
+            parent_alias = self._inherits_query_left_join(query,
+                alias, parent_fname, parent_model._table, 'id', parent_fname,
+            )
+            model, alias, field = parent_model, parent_alias, field.related_field
+        # handle the case where the field is translated
+        if field.translate is True:
+            return model._generate_translated_field(alias, fname, query)
+        else:
+            return '"%s"."%s"' % (alias, fname)
+
 #
 # Implied groups
 #
diff --git a/odoo/models.py b/odoo/models.py
index 37ce8d04..78f8e334 100644
--- a/odoo/models.py
+++ b/odoo/models.py
@@ -2433,7 +2433,6 @@ class BaseModel(MetaModel('DummyModel', (object,), {'_register': False})):
         """
         Adds missing table select and join clause(s) to ``query`` for reaching
         the field coming from an '_inherits' parent table (no duplicates).
-
         :param alias: name of the initial SQL alias
         :param fname: name of inherited field to reach
         :param query: query object on which the JOIN should be added
@@ -3853,7 +3852,28 @@ Fields:
             parent_data_list = []
             for data in data_list:
                 if not data['stored'].get(parent_name):
-                    parent_data_list.append(data)
+                    # Special case if res.users _inherits company_dependent partner_id
+                    # TODO: Split the 3 conditions if this will increase the performance
+                    field = self._fields.get(parent_name)
+                    if field.company_dependent \
+                    and self._name == 'res.users' \
+                    and parent_name == 'partner_id':
+                        # update/create res.partner
+                        if 'res.partner' in data['inherited']:
+                            if 'partner_id' in data['inversed']:
+                                parent = self.env[model_name].browse(data['inversed'][parent_name])
+                                parent.write(data['inherited'][model_name])
+                            else:
+                                partner = self.env['res.partner'].create(data['inherited']['res.partner'])
+                                data['inversed']['partner_id'] = partner.id
+                        # create ir.property
+                        self.env.cr.execute("select nextval('res_users_id_seq');")
+                        id = self.env.cr.fetchone()[0]
+                        partner_id = data['inversed']['partner_id']
+                        data['stored']['id'] = id
+                        self.env['ir.property']._set_multi('partner_id', 'res.users', {id: partner_id})
+                    else:
+                        parent_data_list.append(data)
                 elif data['inherited'][model_name]:
                     parent = self.env[model_name].browse(data['stored'][parent_name])
                     parent.write(data['inherited'][model_name])
