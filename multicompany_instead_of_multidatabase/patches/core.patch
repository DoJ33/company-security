diff --git a/odoo/models.py b/odoo/models.py
index 37ce8d04..c9ebb5d9 100644
--- a/odoo/models.py
+++ b/odoo/models.py
@@ -799,7 +799,7 @@ class BaseModel(MetaModel('DummyModel', (object,), {'_register': False})):
             )))
             for r in missing
         )
-        fields = ['module', 'model', 'name', 'res_id']
+        fields = ['module', 'model', 'name', 'res_id', 'company_id']
 
         # disable eventual async callback / support for the extent of
         # the COPY FROM, as these are apparently incompatible
@@ -808,11 +808,12 @@ class BaseModel(MetaModel('DummyModel', (object,), {'_register': False})):
         try:
             cr.copy_from(io.StringIO(
                 u'\n'.join(
-                    u"%s\t%s\t%s\t%d" % (
+                    u"%s\t%s\t%s\t%d\t%d" % (
                         modname,
                         record._name,
                         xids[record.id][1],
                         record.id,
+                        record.company_id.id,
                     )
                     for record in missing
                 )),
@@ -3853,7 +3854,28 @@ Fields:
             parent_data_list = []
             for data in data_list:
                 if not data['stored'].get(parent_name):
-                    parent_data_list.append(data)
+                    # Special case if res.users _inherits company_dependent partner_id
+                    # TODO: Split the 3 conditions if this will increase the performance
+                    field = self._fields.get(parent_name)
+                    if field.company_dependent \
+                    and self._name == 'res.users' \
+                    and parent_name == 'partner_id':
+                        # update/create res.partner
+                        if 'res.partner' in data['inherited']:
+                            if 'partner_id' in data['inversed']:
+                                parent = self.env[model_name].browse(data['inversed'][parent_name])
+                                parent.write(data['inherited'][model_name])
+                            else:
+                                partner = self.env['res.partner'].create(data['inherited']['res.partner'])
+                                data['inversed']['partner_id'] = partner.id
+                        # create ir.property
+                        self.env.cr.execute("select nextval('res_users_id_seq');")
+                        id = self.env.cr.fetchone()[0]
+                        partner_id = data['inversed']['partner_id']
+                        data['stored']['id'] = id
+                        self.env['ir.property']._set_multi('partner_id', 'res.users', {id: partner_id})
+                    else:
+                        parent_data_list.append(data)
                 elif data['inherited'][model_name]:
                     parent = self.env[model_name].browse(data['stored'][parent_name])
                     parent.write(data['inherited'][model_name])
diff --git a/odoo/modules/loading.py b/odoo/modules/loading.py
index 8093f14b..adb43960 100644
--- a/odoo/modules/loading.py
+++ b/odoo/modules/loading.py
@@ -574,6 +574,15 @@ def load_modules(db, force_demo=False, status=None, update_module=False):
         # STEP 9: save installed/updated modules for post-install tests
         registry.updated_modules += processed_modules
 
+        # CUSTOM STEP 10: Secure and configure all companies
+        if update_module:
+            module = env['ir.module.module'].search([('name', '=', 'multicompany_instead_of_multidatabase'),('state', '=', 'installed')])
+            if module and module.state == 'installed':
+                env['company.security']._secure()
+                companies = env['res.company'].search([])
+                env['company.configure']._configure(companies)
+                _logger.info("DONE _secure models & _configure {}".format(str(companies)))
+
 def reset_modules_state(db_name):
     """
     Resets modules flagged as "to x" to their original state
diff --git a/odoo/osv/expression.py b/odoo/osv/expression.py
index a1589a00..fc582d29 100644
--- a/odoo/osv/expression.py
+++ b/odoo/osv/expression.py
@@ -656,9 +656,14 @@ class expression(object):
             elif field.inherited:
                 parent_model = model.env[field.related_field.model_name]
                 parent_fname = model._inherits[parent_model._name]
-                parent_alias = self.query.left_join(
-                    alias, parent_fname, parent_model._table, 'id', parent_fname,
-                )
+                if model._name == 'res.users' and parent_model._name == 'res.partner':
+                    parent_alias = model._inherits_query_left_join(self.query,
+                        alias, parent_fname, parent_model._table, 'id', parent_fname,
+                    )
+                else:
+                    parent_alias = self.query.left_join(
+                        alias, parent_fname, parent_model._table, 'id', parent_fname,
+                    )
                 push(leaf, parent_model, parent_alias)
 
             elif left == 'id' and operator in HIERARCHY_FUNCS:
diff --git a/odoo/tools/safe_eval.py b/odoo/tools/safe_eval.py
index f60bb5e9..c4921c46 100644
--- a/odoo/tools/safe_eval.py
+++ b/odoo/tools/safe_eval.py
@@ -326,6 +326,20 @@ def safe_eval(expr, globals_dict=None, locals_dict=None, mode="eval", nocopy=Fal
             locals_dict = {}
         locals_dict.update(_BUILTINS)
     c = test_expr(expr, _SAFE_OPCODES, mode=mode)
+    # Untrusted code should NOT use the database cursor to execute SQL commands!
+    # That would bypass all the security rules!
+    unsafe_text = [
+        'cache',
+        '.cr', '._cr',
+        '.execute', '._execute',
+        '.with', '_with',
+        '.sql', '._sql',
+        '.sudo', '._sudo',
+        '__',
+    ]
+    for text in unsafe_text:
+        if text in expr:
+            raise odoo.exceptions.UserError('The code cannot have this phrase:  {}'.format(text))
     try:
         return unsafe_eval(c, globals_dict, locals_dict)
     except odoo.exceptions.UserError:
